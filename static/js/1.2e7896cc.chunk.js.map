{"version":3,"sources":["Actions/dashboard.action.js","config.ts","Components/Services/services.ts"],"names":["dashboardActions","getDashboardStats","organization_id","getAdminUtils","organisationId","console","log","dispatch","a","Connector","get","data","type","DashboardConstants","DASHBOARD_STATS_SUCCESS","payload","getAllRoles","DASHBOARD_ROLES_SUCCESS","getAllStaffs","id","DASHBOARD_USERS_SUCCESS","registerOrganisation","formData","post","notify","err","getAllOrganisation","DASHBOARD_ORGANISATIONS_SUCCESS","registerClient","registerStaff","getAllDrugs","clientId","c_id","DASHBOARD_GET_DRUGS_SUCCESS","getAllDispatchedDrugs","DASHBOARD_GET_DISPATCHED_DRUGS_SUCCESS","getAllDrugsCategories","DASHBOARD_GET_DRUGS_CATEGORY","createDrug","data_","getOneDrug","DASHBOARD_GET_ONE_DRUG","getOneUser","DASHBOARD_GET_ONE_USER","editStaff","put","getAllManufacturers","DASHBOARD_GET_MANUFACTURERS","getOneManufacturer","DASHBOARD_GET_ONE_MANUFACTURER","registerManufacturer","reloadPage","updateManufacturer","updateSuppliers","getAllSuppliers","DASHBOARD_GET_SUPLIERS","registerSupplier","getOneSupplier","DASHBOARD_GET_ONE_SUPPLIER","updateDrug","getAllInventory","DASHBOARD_GET_INVENTORY","createInventory","updateInventory","getOneInventory","DASHBOARD_GET_ONE_INVENTORY","approveInventory","rejectInventory","getAllClients","assigneeid","DASHBOARD_GET_ClIENT_SUCCESS","dispatchDrug","registerDrugCategory","returnDispatchedDrugs","getRecentEvents","pathname","DASHBOARD_RECENT_EVENTS_SUCCESS","getRecentEventsDrugs","DASHBOARD_RECENT_EVENTS_DRUGS_SUCCESS","getOrganisationSummary","DASHBOARD_ORGANISATION_SUMMARY_SUCCESS","root","x","toast","axios","create","interceptors","request","use","config","baseURL","getToken","url","headers","error","Promise","reject","response","message","status"],"mappings":"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","file":"static/js/1.2e7896cc.chunk.js","sourcesContent":["import { DashboardConstants } from \"../constants/AdminConstants\";\nimport Connector from \"../Components/Services/services\";\nimport { getAdminUtils, reloadPage } from \"../Components/Services/helper\";\nimport { notify } from \"../config\";\n\nexport const dashboardActions = {\n  getDashboardStats,\n  getAllRoles,\n  getAllStaffs,\n  registerOrganisation,\n  getAllOrganisation,\n  registerClient,\n  registerStaff,\n  getAllDrugs,\n  getAllDispatchedDrugs,\n  getAllDrugsCategories,\n  createDrug,\n  getOneDrug,\n  getOneUser,\n  editStaff,\n  getAllManufacturers,\n  getOneManufacturer,\n  registerManufacturer,\n  updateManufacturer,\n  updateSuppliers,\n  getAllSuppliers,\n  registerSupplier,\n  getOneSupplier,\n  updateDrug,\n  getAllInventory,\n  createInventory,\n  updateInventory,\n  getOneInventory,\n  approveInventory,\n  rejectInventory,\n  getAllClients,\n  dispatchDrug,\n  registerDrugCategory,\n  returnDispatchedDrugs,\n  getRecentEvents,\n  getRecentEventsDrugs,\n  getOrganisationSummary,\n};\n\nfunction getDashboardStats() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId;\n  console.log(organization_id);\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/organisations/${organization_id}/clients`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_STATS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllOrganisation() {\n  const organization_id = getAdminUtils(\"admin_data\")?.organisationId;\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(\n      `/organisations/${organization_id}/suborganisations`\n    );\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATIONS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getAllRoles() {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/roles`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ROLES_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getRecentEvents(pathname) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`${pathname}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_RECENT_EVENTS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getRecentEventsDrugs(pathname) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`${pathname}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_RECENT_EVENTS_DRUGS_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction getOrganisationSummary(pathname) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`${pathname}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_ORGANISATION_SUMMARY_SUCCESS,\n      payload: data,\n    });\n  };\n}\nfunction approveInventory(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/inventories/${id}/approval`, formData);\n      console.log(data);\n      notify(\"Successfully approved inventory\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction returnDispatchedDrugs(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(\n        `/dispatcheddrugs/${id}/returned`,\n        formData\n      );\n      console.log(data);\n      notify(\"Successfully returned drugs\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction rejectInventory(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/inventories/${id}/approval`, formData);\n      console.log(data);\n      notify(\"Successfully rejected inventory\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction getAllStaffs(id, type) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}/company?type=${type}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_USERS_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction editStaff(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/users/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      // reloadPage()\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction getOneDrug(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/drugs/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_DRUG,\n      payload: data,\n    });\n  };\n}\nfunction getOneInventory(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/inventories/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_INVENTORY,\n      payload: data,\n    });\n  };\n}\n\nfunction getOneUser(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/users/${id}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_USER,\n      payload: data,\n    });\n  };\n}\n\nfunction getAllDrugs() {\n  if (getAdminUtils(\"admin_data\")?.clientId) {\n    const c_id = getAdminUtils(\"admin_data\")?.clientId;\n    console.log(c_id);\n    return async (dispatch) => {\n      const data = await Connector.get(\n        `/drugs/${c_id}/clients?pageNo=${1}&sizePerPage=${100}`\n      );\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n        payload: data?.data?.data,\n      });\n    };\n  }\n  if (!getAdminUtils(\"admin_data\")?.clientId) {\n    return async (dispatch) => {\n      const {\n        data: { data },\n      } = await Connector.get(`/drugs`);\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_DRUGS_SUCCESS,\n        payload: data,\n      });\n    };\n  }\n}\n\nfunction getAllDispatchedDrugs() {\n  if (getAdminUtils(\"admin_data\")?.clientId) {\n    const c_id = getAdminUtils(\"admin_data\")?.clientId;\n    console.log(c_id);\n    return async (dispatch) => {\n      const data = await Connector.get(\n        `/dispatcheddrugs/${c_id}/clients?pageNo=${1}&sizePerPage=${100}`\n      );\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_DISPATCHED_DRUGS_SUCCESS,\n        payload: data?.data?.data,\n      });\n    };\n  }\n  if (!getAdminUtils(\"admin_data\")?.clientId) {\n    return async (dispatch) => {\n      const {\n        data: { data },\n      } = await Connector.get(`/dispatcheddrugs?pageNo=${1}&sizePerPage=${20}`);\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_DISPATCHED_DRUGS_SUCCESS,\n        payload: data,\n      });\n    };\n  }\n}\n\nfunction getAllClients(assigneeid) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/clients/${assigneeid}`);\n    console.log(data);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ClIENT_SUCCESS,\n      payload: data,\n    });\n  };\n}\n\nfunction getAllDrugsCategories() {\n  if (getAdminUtils(\"admin_data\")?.clientId) {\n    const c_id = getAdminUtils(\"admin_data\")?.clientId;\n    console.log(c_id);\n    return async (dispatch) => {\n      const data = await Connector.get(\n        `/drugscategories/${c_id}/paged?pageNo=${1}&sizePerPage=${100}`\n      );\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n        payload: data?.data?.data,\n      });\n    };\n  }\n  if (!getAdminUtils(\"admin_data\")?.clientId) {\n    return async (dispatch) => {\n      const {\n        data: { data },\n      } = await Connector.get(`/drugscategories`);\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_DRUGS_CATEGORY,\n        payload: data,\n      });\n    };\n  }\n}\nfunction getAllManufacturers() {\n  if (getAdminUtils(\"admin_data\")?.clientId) {\n    const c_id = getAdminUtils(\"admin_data\")?.clientId;\n    console.log(c_id);\n    return async (dispatch) => {\n      const data = await Connector.get(\n        `/manufacturers/${c_id}/paged?pageNo=${1}&sizePerPage=${100}`\n      );\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n        payload: data?.data?.data,\n      });\n    };\n  }\n  if (!getAdminUtils(\"admin_data\").clientId) {\n    return async (dispatch) => {\n      const {\n        data: { data },\n      } = await Connector.get(`/manufacturers`);\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_MANUFACTURERS,\n        payload: data,\n      });\n    };\n  }\n}\nfunction getAllSuppliers() {\n  console.log(getAdminUtils(\"admin_data\").clientId, \"client id\");\n  if (getAdminUtils(\"admin_data\")?.clientId) {\n    const c_id = getAdminUtils(\"admin_data\")?.clientId;\n    console.log(c_id);\n    return async (dispatch) => {\n      const data = await Connector.get(\n        `/suppliers/${c_id}/paged?pageNo=${1}&sizePerPage=${100}`\n      );\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n        payload: data?.data?.data,\n      });\n    };\n  }\n  if (!getAdminUtils(\"admin_data\").clientId) {\n    return async (dispatch) => {\n      const {\n        data: { data },\n      } = await Connector.get(`/suppliers`);\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_SUPLIERS,\n        payload: data,\n      });\n    };\n  }\n}\nfunction getAllInventory() {\n  if (getAdminUtils(\"admin_data\")?.clientId) {\n    const c_id = getAdminUtils(\"admin_data\")?.clientId;\n    console.log(c_id);\n    return async (dispatch) => {\n      const data = await Connector.get(\n        `/inventories/${c_id}/paged?pageNo=${1}&sizePerPage=${100}`\n      );\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n        payload: data?.data?.data,\n      });\n    };\n  }\n  if (!getAdminUtils(\"admin_data\")?.clientId) {\n    return async (dispatch) => {\n      const {\n        data: { data },\n      } = await Connector.get(`/inventories`);\n      console.log(data);\n      dispatch({\n        type: DashboardConstants.DASHBOARD_GET_INVENTORY,\n        payload: data,\n      });\n    };\n  }\n}\n\nfunction getOneManufacturer(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/manufacturers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_MANUFACTURER,\n      payload: data,\n    });\n  };\n}\nfunction getOneSupplier(id) {\n  return async (dispatch) => {\n    const {\n      data: { data },\n    } = await Connector.get(`/suppliers/${id}`);\n    dispatch({\n      type: DashboardConstants.DASHBOARD_GET_ONE_SUPPLIER,\n      payload: data,\n    });\n  };\n}\n\nfunction registerManufacturer(formData) {\n  try {\n    if (getAdminUtils(\"admin_data\").clientId) {\n      var data_ = {\n        ...formData,\n        clientId: getAdminUtils(\"admin_data\").clientId,\n      };\n    }\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/manufacturers`,\n        getAdminUtils(\"admin_data\").clientId ? data_ : formData\n      );\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction registerDrugCategory(formData) {\n  try {\n    if (getAdminUtils(\"admin_data\").clientId) {\n      var data_ = {\n        ...formData,\n        clientId: getAdminUtils(\"admin_data\").clientId,\n      };\n    }\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/drugscategories`,\n        getAdminUtils(\"admin_data\").clientId ? data_ : formData\n      );\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\nfunction registerSupplier(formData) {\n  try {\n    if (getAdminUtils(\"admin_data\").clientId) {\n      var data_ = {\n        ...formData,\n        clientId: getAdminUtils(\"admin_data\").clientId,\n      };\n    }\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/suppliers`,\n        getAdminUtils(\"admin_data\").clientId ? data_ : formData\n      );\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateManufacturer(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/manufacturers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateSuppliers(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/suppliers/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\nfunction updateInventory(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/inventories/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to update\");\n  }\n}\n\nfunction createDrug(formData) {\n  console.log(getAdminUtils(\"admin_data\").clientId);\n  if (getAdminUtils(\"admin_data\").clientId) {\n    var data_ = {\n      ...formData,\n      clientId: getAdminUtils(\"admin_data\").clientId,\n    };\n  }\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/drugs`,\n        getAdminUtils(\"admin_data\").clientId ? data_ : formData\n      );\n      console.log(data);\n      notify(\"Successfully created\");\n      // reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction createInventory(formData) {\n  try {\n    if (getAdminUtils(\"admin_data\").clientId) {\n      var data_ = {\n        ...formData,\n        clientId: getAdminUtils(\"admin_data\").clientId,\n      };\n    }\n    return async (dispatch) => {\n      const data = await Connector.post(\n        `/inventories`,\n        getAdminUtils(\"admin_data\").clientId ? data_ : formData\n      );\n      console.log(data);\n      notify(\"Successfully created\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction updateDrug(formData, id) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.put(`/drugs/${id}`, formData);\n      console.log(data);\n      notify(\"Successfully updated\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerOrganisation(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/organisations/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerClient(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/clients/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction registerStaff(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/users/register`, formData);\n      console.log(data);\n      notify(data?.data?.data);\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n\nfunction dispatchDrug(formData) {\n  try {\n    return async (dispatch) => {\n      const data = await Connector.post(`/dispatcheddrugs`, formData);\n      console.log(data);\n      notify(\"Success\");\n      reloadPage();\n    };\n  } catch (err) {\n    notify(\"failed to process\");\n  }\n}\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\n\nexport const Appcontext: any = React.createContext({\n  state: {},\n  setState: () => { },\n});\n\nexport const api = \"https://stepformbackend.herokuapp.com/\"\nexport const root = `https://medipharm-test.herokuapp.com/api`\n// http://172.105.71.75:8091/api\n\nexport const notify = (x) => {\n  toast(x);\n};","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { deleteToken, getToken } from \"./helper\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { notify, root } from '../../config';\n\nconst logout = () => {\n  deleteToken();\n  const redirectUrl = window.location.pathname;\n  return (window.location.href = \"/login?redirect=\" + redirectUrl);\n};\n\nconst Connector = axios.create();\n\nConnector.interceptors.request.use(\n  (config) => {\n    config.baseURL = root;\n    console.log(config)\n    if(getToken()!==\"undefined\" && config.url!==(\"/login\")&& config.url!==(\"/changepassword\")){\n      config.headers[\"Authorization\"] = getToken()? `Bearer ${getToken()}`:\"\";\n    }\n    config.headers[\"Content-Type\"] = \"application/json\";\n    config.headers[\"Accept\"] = \"application/json\";\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\nConnector.interceptors.response.use(\n  (response) => {\n    console.log(response)\n    return response;\n  },\n  (error) => {\n    console.error('error_status', error?.response);\n    notify(error?.response?.data?.message)\n    if (error?.response?.status === 401 || error?.response?.status === 404) {\n      notify(\"Failed to process please try again later\")\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default Connector;"],"sourceRoot":""}