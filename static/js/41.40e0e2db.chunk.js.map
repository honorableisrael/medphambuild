{"version":3,"sources":["Components/views/auth/ForgotPassword.tsx","config.ts","Components/Services/services.ts"],"names":["ForgotPassword","props","useState","email","isloading","errorMessage","success","state","setState","validateForm","e","preventDefault","submitForm","a","Connector","post","response","data","status","className","onSubmit","variant","type","name","value","onChange","target","placeholder","size","to","root","notify","x","toast","axios","create","interceptors","request","use","config","baseURL","console","log","getToken","url","headers","error","Promise","reject","message"],"mappings":"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","file":"static/js/41.40e0e2db.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Container, Alert, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Connector from \"../../Services/services\";\nimport { setTokenUtils } from \"../../Services/helper\";\n\nconst ForgotPassword = (props) => {\n  const [state, setState] = useState({\n    email: \"\",\n    isloading: false,\n    errorMessage: \"\",\n    success: \"\",\n  });\n  const { email, success, errorMessage, isloading } = state;\n  const validateForm = (e) => {\n    e.preventDefault();\n    if (!email) {\n      return setState({\n        ...state,\n        errorMessage: \"Email address is required\",\n      });\n    }\n    submitForm();\n  };\n  const submitForm = async () => {\n    setState({\n      ...state,\n      isloading: true,\n    });\n    try {\n      const response = await Connector.post(`/requestpasswordreset/${email}`);\n      const {\n        data: { data },\n      } = response;\n      setState({\n        ...state,\n        success:\n          \"A token has been sent to the provided email address, please check your inbox to proceed\",\n        isloading: false,\n      });\n    } catch (error) {\n      if (error?.response?.status == 404) {\n        setState({\n          ...state,\n          errorMessage: \"Failed to reset password, email does not exist\",\n          isloading: false,\n        });\n      }\n    }\n  };\n  const onchange = (e) => {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n      errorMessage: \"\",\n    });\n  };\n  return (\n    <>\n      <div className=\"container-fluid lgwrap\">\n        <div className=\"row justify-center\">\n          <div className=\"col-md-5 loginformbody\">\n            <div className=\"ft1\">Forgot Password</div>\n            <div className=\"ft3\">Recover your Account</div>\n            <form className=\"form-wrapper\" onSubmit={validateForm}>\n              <div className=\"form-header\">\n                {errorMessage && (\n                  <div className=\"signinalertmssg\">\n                    <Alert variant={\"danger\"}>{errorMessage}</Alert>\n                  </div>\n                )}\n                {success && (\n                  <div className=\"signinalertmssg\">\n                    <Alert variant={\"info\"}>{success}</Alert>\n                  </div>\n                )}\n              </div>\n              <div className=\"padded-signin-wrapper\">\n                <label className=\"inputlabel\">\n                  <span className=\"rdfrmlbl\">\n                    {\" \"}\n                    Email Address <span className=\"text-danger\">*</span>{\" \"}\n                  </span>\n                  <input\n                    type=\"text\"\n                    name=\"email\"\n                    value={email}\n                    onChange={onchange}\n                    placeholder=\"Enter your Email Address\"\n                    size={60}\n                    className=\"form-control forminput\"\n                  />\n                </label>\n                <div className=\"forgotpassword\">\n                  <Link to=\"/login\">Login </Link>\n                </div>\n                <div className=\"form-btn-wrapper loginbtdv\">\n                  <input\n                    className=\"signinbtn\"\n                    type=\"submit\"\n                    onSubmit={validateForm}\n                    value={isloading ? \"Submitting...\" : \"Submit\"}\n                  />\n                </div>\n                <p className=\"signuprgqt1\">Â© Drug Monitoring, 2021</p>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ForgotPassword;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\n\nexport const Appcontext: any = React.createContext({\n  state: {},\n  setState: () => { },\n});\n\nexport const api = \"https://stepformbackend.herokuapp.com/\"\nexport const root = `https://medipharm-test.herokuapp.com/api`\n// http://172.105.71.75:8091/api\n\nexport const notify = (x) => {\n  toast(x);\n};","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { deleteToken, getToken } from \"./helper\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { notify, root } from '../../config';\n\nconst logout = () => {\n  deleteToken();\n  const redirectUrl = window.location.pathname;\n  return (window.location.href = \"/login?redirect=\" + redirectUrl);\n};\n\nconst Connector = axios.create();\n\nConnector.interceptors.request.use(\n  (config) => {\n    config.baseURL = root;\n    console.log(config)\n    if(getToken()!==\"undefined\" && config.url!==(\"/login\")&& config.url!==(\"/changepassword\")){\n      config.headers[\"Authorization\"] = getToken()? `Bearer ${getToken()}`:\"\";\n    }\n    config.headers[\"Content-Type\"] = \"application/json\";\n    config.headers[\"Accept\"] = \"application/json\";\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\nConnector.interceptors.response.use(\n  (response) => {\n    console.log(response)\n    return response;\n  },\n  (error) => {\n    console.error('error_status', error.response);\n    notify(error?.response?.data?.message)\n    if (error?.response?.status === 401 || error?.response?.status === 404) {\n      notify(\"Failed to process please try again later\")\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default Connector;"],"sourceRoot":""}