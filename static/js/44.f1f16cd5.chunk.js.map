{"version":3,"sources":["Components/views/auth/Verify.tsx","config.ts","Components/Services/services.ts"],"names":["VerifyCode","props","useState","code","password","emailAddress","newPassword","isloading","errorMessage","open","success","state","setState","validateForm","e","preventDefault","submitForm","a","data_","Connector","post","match","params","response","data","console","log","setTimeout","window","location","assign","onchange","target","name","value","className","onSubmit","variant","type","onChange","placeholder","size","onClick","to","root","notify","x","toast","axios","create","interceptors","request","use","config","baseURL","getToken","url","headers","error","Promise","reject","message","status"],"mappings":"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","file":"static/js/44.f1f16cd5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Container, Alert, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Connector from \"../../Services/services\";\nimport { setTokenUtils } from \"../../Services/helper\";\n\nconst VerifyCode = (props) => {\n  const [state, setState] = useState({\n    code: \"\",\n    password: \"\",\n    emailAddress: \"\",\n    newPassword: \"\",\n    isloading: false,\n    errorMessage: \"\",\n    open:false,\n    success: \"\",\n  });\n  const { code, emailAddress, newPassword, success, errorMessage,open, isloading } =\n    state;\n  const validateForm = (e) => {\n    e.preventDefault();\n    if (!newPassword) {\n      return setState({\n        ...state,\n        errorMessage: \"New password is required\",\n      });\n    }\n    if (!emailAddress) {\n      return setState({\n        ...state,\n        errorMessage: \"Email address is required\",\n      });\n    }\n    submitForm();\n  };\n  const submitForm = async () => {\n    setState({\n      ...state,\n      isloading: true,\n    });\n    const data_ = {\n      newPassword,\n      emailAddress,\n    };\n    try {\n      const response = await Connector.post(\n        `/verify/${props.match.params.code}`,\n        data_\n      );\n      const {\n        data: { data },\n      } = response;\n      console.log(response);\n      setState({\n        ...state,\n        success: \"Successful\",\n        isloading: false,\n      });\n      setTimeout(() => {\n        window.location.assign(\"/login\");\n      }, 3000);\n    } catch (error) {\n      setState({\n        ...state,\n        errorMessage:\n          error?.response?.data?.newPassword + \"Verification failed\",\n        isloading: false,\n      });\n    }\n  };\n  const onchange = (e) => {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value,\n      errorMessage: \"\",\n    });\n  };\n  return (\n    <>\n      <div className=\"container-fluid lgwrap\">\n        <div className=\"row justify-center\">\n          <div className=\"col-md-5 loginformbody\">\n            <div className=\"ft3\">Verify account</div>\n            <form className=\"form-wrapper\" onSubmit={validateForm}>\n              <div className=\"form-header\">\n                {errorMessage && (\n                  <div className=\"signinalertmssg\">\n                    <Alert variant={\"danger\"}>{errorMessage}</Alert>\n                  </div>\n                )}\n                {success && (\n                  <div className=\"signinalertmssg\">\n                    <Alert variant={\"info\"}>{success}</Alert>\n                  </div>\n                )}\n              </div>\n              <div className=\"padded-signin-wrapper\">\n                {/* <label className=\"inputlabel\">\n                  <span className=\"rdfrmlbl\">\n                    {\" \"}\n                    Code <span className=\"text-danger\">*</span>{\" \"}\n                  </span>\n                  <input\n                    type=\"text\"\n                    name=\"code\"\n                    value={code}\n                    onChange={onchange}\n                    placeholder=\"Enter code\"\n                    size={60}\n                    className=\"form-control forminput\"\n                  />\n                </label> */}\n                <label className=\"inputlabel\">\n                  <span className=\"rdfrmlbl\">\n                    {\" \"}\n                    Email Address <span className=\"text-danger\">*</span>{\" \"}\n                  </span>\n                  <input\n                    type=\"text\"\n                    name=\"emailAddress\"\n                    value={emailAddress}\n                    onChange={onchange}\n                    placeholder=\"Enter email\"\n                    size={60}\n                    className=\"form-control forminput\"\n                  />\n                </label>\n                <label className=\"inputlabel\">\n                  <span className=\"rdfrmlbl\">\n                    {\" \"}\n                    New Password <span className=\"text-danger\">*</span>{\" \"}\n                  </span>\n                  <input\n                    type={open ? \"text\" : \"password\"}\n                    name=\"newPassword\"\n                    value={newPassword}\n                    onChange={onchange}\n                    placeholder=\"Enter new password\"\n                    size={60}\n                    className=\"form-control forminput\"\n                  />\n                </label>\n                <div className=\"text-righ\">\n                  {\" \"}\n                  <span\n                    onClick={() => {\n                      setState({\n                        ...state,\n                        open: open ? false : true,\n                      });\n                    }}\n                  >\n                    &#128065;\n                  </span>\n                </div>\n                <div className=\"forgotpassword\">\n                  <Link to=\"/login\">Login </Link>\n                </div>\n                <div className=\"form-btn-wrapper loginbtdv\">\n                  <input\n                    className=\"signinbtn\"\n                    type=\"submit\"\n                    onSubmit={validateForm}\n                    value={isloading ? \"Submitting...\" : \"Submit\"}\n                  />\n                </div>\n                <p className=\"signuprgqt1\">Â© Drug Monitoring, 2021</p>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default VerifyCode;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\n\nexport const Appcontext: any = React.createContext({\n  state: {},\n  setState: () => { },\n});\n\nexport const api = \"https://stepformbackend.herokuapp.com/\"\nexport const root = `https://medipharm-test.herokuapp.com/api`\n// http://172.105.71.75:8091/api\n\nexport const notify = (x) => {\n  toast(x);\n};","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { deleteToken, getToken } from \"./helper\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { notify, root } from '../../config';\n\nconst logout = () => {\n  deleteToken();\n  const redirectUrl = window.location.pathname;\n  return (window.location.href = \"/login?redirect=\" + redirectUrl);\n};\n\nconst Connector = axios.create();\n\nConnector.interceptors.request.use(\n  (config) => {\n    config.baseURL = root;\n    console.log(config)\n    if(getToken()!==\"undefined\" && config.url!==(\"/login\")&& config.url!==(\"/changepassword\")){\n      config.headers[\"Authorization\"] = getToken()? `Bearer ${getToken()}`:\"\";\n    }\n    config.headers[\"Content-Type\"] = \"application/json\";\n    config.headers[\"Accept\"] = \"application/json\";\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\nConnector.interceptors.response.use(\n  (response) => {\n    console.log(response)\n    return response;\n  },\n  (error) => {\n    console.error('error_status', error?.response);\n    notify(error?.response?.data?.message)\n    if (error?.response?.status === 401 || error?.response?.status === 404) {\n      notify(\"Failed to process please try again later\")\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default Connector;"],"sourceRoot":""}